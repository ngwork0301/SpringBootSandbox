////////////////////
// build.gradleに書く内容は、１つのおおきなクロージャとして扱われ、
// そのクロージャのdelegateに、Gradleフレームワークのオブジェクトが指定されてGradleが動作する
// configuration, dependencies, repositoryes, tasks などは
// Gradleフレームワークの内部にある Projectオブジェクトのメソッド、およびプロパティに対応している

// 3つのフェーズ
// GradleのProjectオブジェクトは、３つのフェーズを経て初期化・実行される
// 1. 初期化フェーズ
//   Projectオブジェクトを生成
// 2. 設定フェーズ
//   build.gradleに書かれた設定用の内容を実行
//     Project#configuration 実行
//       configurationブロックで指定したクロージャが、Projectオブジェクト配下にあるConfigurationContainerに処理をデリゲートする
//     Project#dependencies 実行
//       dependenciesブロックで指定したクロージャが、DependencyHanlderに処理をデリゲート
//     Project#repositories 実行
//       repositoriesブロックで指定したクロージャが、RepositoryHandlerに処理をデリゲート
//     Projectオブジェクトのtasksプロパティを初期化し、各Taskを追加
//       tasksプロパティは、TaskContainerというインタフェースを実装し、resigterなどのメソッドを持つ
// 3. 実行フェーズ
//   gradleコマンドの引数に対応するTaskのactionsを実行


// println "Hello World."
// // System.getenv のように引数のない関数のカッコは省略できない
// println System.getenv()

// // ダブルクォーテーションの文字列内には、シェルっぽく${}で変数を入れられる
// def greet = 'Hello'
// println "${greet} World!"

// // クラスの実装
// // Groovy内にはクラスのフィードとメソッドはすべてpublic
// class TestClass {
//     def hoge = 'abc'

//     // フィードアクセスでこれが呼ばれる
//     def getHoge() {
//         println 'getHoge() called'
//         return this.hoge
//     }

//     // フィードアクセスでこれが呼ばれる
//     def setHoge(newHoge) {
//         println "setHoge(${newHoge}) called"
//         this.hoge = newHoge
//     }
    
//     def sayHoge() {
//         println hoge
//     }
// }

// def test = new TestClass()

// println test.hoge
// test.hoge = 'cdf'

// test.sayHoge()


//  // クロージャの実装
//  // クロージャは本来は「環境つき関数」だが、
//  // Groovyでは「無名関数」「ラムダ」の意味合いも持つ

//  // 本来のクロージャ
//  def c0 = {
//     def local = 1
//     return { x -> local += x; println local }
//  }

//  def closure = c0()
//  closure(100) // 101
//  closure(100) // 201
//  closure(100) // 301

// // 無名関数としてのクロージャ
// def c1 = { a, b -> println a + b }
// c1(1, 2)   // 3

// // ラムダとしてのクロージャ
// def c2 = { a -> println a}
// [10, 20, 30].each(c2)   // [] はJavaのList型と同じ。10, 20, 30
// // リストや配列、コレクションなどのつかいかたは
// // https://koji-k.github.io/groovy-tutorial/collection/list.html

// // 引数が1つだけの場合、記述を省略できる（引数がitとして予約される）
// def c3 = { println it }
// c3(1000)  // 1000
// def c4 = { it() }  // 引数でうけとったクロージャをそのまま実行
// c4 {
//     println 'abc'
// }

// // 引数の最後がクロージャのとき、クロージャの中身の実装を外側に書ける
// def c5 = { a, closure5 -> 
//     closure5(a) 
// }
// // 普通なら以下のように第2引数にクロージャを渡すが
// c5('def', { println it })
// // 以下のように外側にクロージャの実装を書ける
// c5('ghi') {
//     println it
// }

// // クロージャのデリゲート (template Methodパターン)
// def c6 = {
//     hoge(123)    // delegateに指定された実装にあわせてメソッドの中身を差し替えられる
//     fuga('abc')
// }

// class HogeFuga {
//     def hoge(int num) {
//         println num
//     }

//     def fuga(String str) {
//         println str
//     }
// }

// def hogefuga = new HogeFuga()

// // クロージャの delegate に HogeFugaクラスのインスタンスを設定
// c6.delegate = hogefuga
// c6()

// // ファイル操作

// // file()でFileオブジェクト(Java)が生成できる
// file('./dir1').mkdir()
// file('./dir1/a.txt').createNewFile()
// file('./dir1/b.txt').createNewFile()
// file('./dir1/dir2').mkdir()
// file('./dir1/dir2/c.txt').createNewFile()

// // files() で FileCollectionオブジェクト(Gradle固有) が生成できる
// // - Iterable<File> の実装クラス
// // https://docs.gradle.org/current/javadoc/org/gradle/api/file/FileCollection.html
// def list = files('c.json', 'a.txt', 'a.csv', 'a.json', 'b.csv', 'b.json')
// list.filter({ f -> f.getName().endsWith('.json') }).sort().each({ println it.getName() })

// // ネストしてもフラットなリストとして扱える
// def list2 = files(files('c.json', 'a.txt', 'a.csv'), files('a.json', 'b.csv', 'b.json'))
// list.filter({ f -> f.getName().endsWith('.csv') }).sort().each({ println it.getName() })

// // fileTreeでFileTreeオブジェクト(Gradle固有）が生成できる
// // - FileCollectionのサブクラス
// // https://docs.gradle.org/current/javadoc/org/gradle/api/file/FileTree.html
// fileTree('./dir1').visit({ println it.getPath().toString() })

// file('./dir1/dir2/c.txt').delete()
// file('./dir1/dir2').delete()
// file('./dir1/b.txt').delete()
// file('./dir1/a.txt').delete()
// file('./dir1').delete()


// // deleteは、ファイル、ディレクトリは再帰的に削除可能
// file('./tmp').mkdir()
// file('./tmp/abc.txt').createNewFile()

// delete './tmp'

// // copy
// // 引数にクロージャを渡すことで様々なカスタマイズが可能
// delete './from'
// delete './into'
// file('./from').mkdir()
// file('./from/a.txt').createNewFile()
// file('./from/dir').mkdir()
// file('./from/dir/b.txt').createNewFile()
// file('./into').mkdir()

// import java.nio.file.Files
// import java.nio.file.Path
// file('./from/hogefuga.txt').createNewFile()
// Files.writeString(Path.of('./from/hogefuga.txt'), '''
// Hello, ${hoge} !
// Hello, ${fuga} !
// ''');

// // hogefuga.txtをテンプレートにして、${hoge}と${fuga}の中身を置き換えてファイル生成
// copy {
//     from './from/hogefuga.txt'
//     into './into'
//     expand([
//         hoge: 'aaa',
//         fuga: 'bbb'
//     ])
// }

// delete './from'
// delete './into'


// // execでコマンド実行ができる
// exec {
//     commandLine 'java', '-version'
// }

// // 環境変数の指定
// // - mac / linux
// exec {
//     environment = [ 'test1': 'aaa' , 'test2': 'bbb' , 'test3': 'ccc' ]
//     commandLine 'sh', '-c', 'echo $test1 $test2 $test3'
// }

// // javaexecでjavaコマンドを呼び出し
// import java.nio.file.Path;
// import java.nio.file.Files;

// delete('./Main.java')
// delete('./Main.class')

// Files.writeString(Path.of('Main.java'), '''
// import java.util.Arrays;

// public class Main {
//     public static void main(String[] args) {
//         System.out.println(Arrays.toString(args));
//     }
// }
// ''');

// exec {
//     commandLine 'javac', 'Main.java'
// }


// javaexec {
//     main = 'Main'
//     classpath = files('.')
//     args = ['a', 'b', 'c']
// }

// delete('./Main.java')
// delete('./Main.class')


/////////////////////////
// Gradle フレームワーク
/////////////////////////

// Taskの登録
tasks.register('task1') {
    doLast {
        println 'This is task1'
    }
    doLast {
        println 'Hello'
    }
    doLast {
        println 'World'
    }
}

// doLastの中身は、以下のようなactionsへの追加
// tasks.register('task1') {
//     actions.add(new Action<Task>() {
//         @Override
//         public void execute(Task task) {
//             println("aaa")
//         }
//     })
// }

// Taskが使えるメソッド
// https://docs.gradle.org/current/dsl/org.gradle.api.Task.html#N18C09

task1 {
    doLast {
        println 'additional processing'
    }
}

// doLast内の処理は、実行フェーズ
// その外に書いた処理は、設定フェーズ
tasks.register('task2') {
    println 'config a'
    doLast {
        println 'exec a'
    }
}

tasks.register('task3') {
    // dependsOnで依存するタスクを登録すると、task3を呼び出すと、task2が先に実行される
    dependsOn 'task2'
    doLast {
        println 'exec b'
    }
}

// Taskの依存関係の重複は削除される
tasks.register('task4') {
    dependsOn 'task2'
    dependsOn 'task3'
    doLast {
        println 'exec c'
    }
}

// 組み込みタスク
// Copyタスク
delete './from'
delete './into'
file('./from').mkdir()
file('./from/a.txt').createNewFile()
file('./from/dir').mkdir()
file('./from/dir/b.txt').createNewFile()

tasks.register('copytask', Copy) {
    from './from'
    into './into'
}

delete './from'
delete './into'


// Execタスク
tasks.register('exectask', Exec) {
    environment = [ 'test1': 'aaa', 'test2': 'bbb', 'test3': 'ccc' ]
    commandLine 'sh', '-c', 'echo $test1 $test2 $test3'
}


// JavaExecタスク
// 同様なので割愛

// Zipタスク
delete './from'
delete './into'
file('./from').mkdir()
file('./from/a.txt').createNewFile()
file('./from/dir').mkdir()
file('./from/dir/b.txt').createNewFile()


tasks.register('ziptask', Zip) {
    from './from'
    archiveFileName.set('test.zip')
    destinationDirectory.set(layout.projectDirectory) // build.gradleがあるディレクトリ

    doLast {
        delete './from'
        delete './test.zip'
    }
}

// Tarタスク
delete './from'
delete './into'
file('./from').mkdir()
file('./from/a.txt').createNewFile()
file('./from/dir').mkdir()
file('./from/dir/b.txt').createNewFile()


tasks.register('tartask', Tar) {
    from './from'
    archiveFileName.set('test.tar.gz')
    destinationDirectory.set(layout.projectDirectory) // build.gradleがあるディレクトリ

    doLast {
        delete './from'
        delete './test.tar.gz'
    }
}

/////////////////////
// Configuration

// ファイルをグループ化
// configurations {
//     conf
// }

// dependencies {
//     conf files('./a.txt')
//     conf files('./b.txt')
//     conf files('./c.txt')
// }

// copy {
//     from configurations.conf
//     into './dir'
// }

// セントラルリポジトリからjarの取得
// configurations {
//     conf {
//         // 推移的関係の無効化
//         // transitive false

//         // 部分的に推移的関係を無効化
//         exclude module: 'log4j-core'
//     }
// }

// dependencies {
//     // https://mvnrepository.com/artifact/org.slf4j/slf4j-api/1.7.25
//     // Latest戦略により、依存するjarのバージョンが違ったときは、最新のバージョンが採用される
//     conf 'org.slf4j:slf4j-api:1.6.6'
//     conf 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.2'
// }

// repositories {
//     mavenCentral()
// }

// copy {
//     from configurations.conf
//     into './lib'
// }

// 推移的依存関係の解決
// 以下のコマンドで依存関係を確認できる
// gradle dependencies

// conf
// +--- org.slf4j:slf4j-api:1.7.25
// \--- org.apache.logging.log4j:log4j-slf4j-impl:2.17.2
//      +--- org.slf4j:slf4j-api:1.7.25
//      +--- org.apache.logging.log4j:log4j-api:2.17.2
//      \--- org.apache.logging.log4j:log4j-core:2.17.2
//           \--- org.apache.logging.log4j:log4j-api:2.17.2

configurations {
    conf
}

dependencies {
    conf 'org.slf4j:slf4j-api:1.6.6'
    conf 'org.slf4j:slf4j-simple:1.7.25'
}

repositories {
    mavenCentral()
}

tasks.register('resolveDependencies', Copy) {
    from configurations.conf
    into './lib'
}

tasks.register('javac', Exec) {
    dependsOn resolveDependencies
    delete './Main.class'
    commandLine 'javac', 'Main.java', '-cp', './lib/*', '-encoding', 'UTF-8', '-source', '17', '-d', './classes'
}

tasks.register('jar', Exec) {
    dependsOn javac
    delete './jar'
    file('./jar').mkdirs()
    commandLine 'jar', 'cfe', './jar/main.jar', 'Main', '-C', './classes', '.'
}

tasks.register('exec', JavaExec) {
    dependsOn jar
    main = 'Main'
    classpath = files('./lib/*:./jar/main.jar')
    args = ['a', 'b', 'c']
}
