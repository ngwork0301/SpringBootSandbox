println "Hello World."
// System.getenv のように引数のない関数のカッコは省略できない
println System.getenv()

// ダブルクォーテーションの文字列内には、シェルっぽく${}で変数を入れられる
def greet = 'Hello'
println "${greet} World!"

// クラスの実装
// Groovy内にはクラスのフィードとメソッドはすべてpublic
class TestClass {
    def hoge = 'abc'

    // フィードアクセスでこれが呼ばれる
    def getHoge() {
        println 'getHoge() called'
        return this.hoge
    }

    // フィードアクセスでこれが呼ばれる
    def setHoge(newHoge) {
        println "setHoge(${newHoge}) called"
        this.hoge = newHoge
    }
    
    def sayHoge() {
        println hoge
    }
}

def test = new TestClass()

println test.hoge
test.hoge = 'cdf'

test.sayHoge()


 // クロージャの実装
 // クロージャは本来は「環境つき関数」だが、
 // Groovyでは「無名関数」「ラムダ」の意味合いも持つ

 // 本来のクロージャ
 def c0 = {
    def local = 1
    return { x -> local += x; println local }
 }

 def closure = c0()
 closure(100) // 101
 closure(100) // 201
 closure(100) // 301

// 無名関数としてのクロージャ
def c1 = { a, b -> println a + b }
c1(1, 2)   // 3

// ラムダとしてのクロージャ
def c2 = { a -> println a}
[10, 20, 30].each(c2)   // [] はJavaのList型と同じ。10, 20, 30
// リストや配列、コレクションなどのつかいかたは
// https://koji-k.github.io/groovy-tutorial/collection/list.html

// 引数が1つだけの場合、記述を省略できる（引数がitとして予約される）
def c3 = { println it }
c3(1000)  // 1000
def c4 = { it() }  // 引数でうけとったクロージャをそのまま実行
c4 {
    println 'abc'
}

// 引数の最後がクロージャのとき、クロージャの中身の実装を外側に書ける
def c5 = { a, closure5 -> 
    closure5(a) 
}
// 普通なら以下のように第2引数にクロージャを渡すが
c5('def', { println it })
// 以下のように外側にクロージャの実装を書ける
c5('ghi') {
    println it
}

// クロージャのデリゲート (template Methodパターン)
def c6 = {
    hoge(123)    // delegateに指定された実装にあわせてメソッドの中身を差し替えられる
    fuga('abc')
}

class HogeFuga {
    def hoge(int num) {
        println num
    }

    def fuga(String str) {
        println str
    }
}

def hogefuga = new HogeFuga()

// クロージャの delegate に HogeFugaクラスのインスタンスを設定
c6.delegate = hogefuga
c6()

// ファイル操作

// file()でFileオブジェクト(Java)が生成できる
file('./dir1').mkdir()
file('./dir1/a.txt').createNewFile()
file('./dir1/b.txt').createNewFile()
file('./dir1/dir2').mkdir()
file('./dir1/dir2/c.txt').createNewFile()

// files() で FileCollectionオブジェクト(Gradle固有) が生成できる
// - Iterable<File> の実装クラス
// https://docs.gradle.org/current/javadoc/org/gradle/api/file/FileCollection.html
def list = files('c.json', 'a.txt', 'a.csv', 'a.json', 'b.csv', 'b.json')
list.filter({ f -> f.getName().endsWith('.json') }).sort().each({ println it.getName() })

// ネストしてもフラットなリストとして扱える
def list2 = files(files('c.json', 'a.txt', 'a.csv'), files('a.json', 'b.csv', 'b.json'))
list.filter({ f -> f.getName().endsWith('.csv') }).sort().each({ println it.getName() })

// fileTreeでFileTreeオブジェクト(Gradle固有）が生成できる
// - FileCollectionのサブクラス
// https://docs.gradle.org/current/javadoc/org/gradle/api/file/FileTree.html
fileTree('./dir1').visit({ println it.getPath().toString() })

file('./dir1/dir2/c.txt').delete()
file('./dir1/dir2').delete()
file('./dir1/b.txt').delete()
file('./dir1/a.txt').delete()
file('./dir1').delete()


// deleteは、ファイル、ディレクトリは再帰的に削除可能
file('./tmp').mkdir()
file('./tmp/abc.txt').createNewFile()

delete './tmp'

// copy
// 引数にクロージャを渡すことで様々なカスタマイズが可能
delete './from'
delete './into'
file('./from').mkdir()
file('./from/a.txt').createNewFile()
file('./from/dir').mkdir()
file('./from/dir/b.txt').createNewFile()
file('./into').mkdir()

import java.nio.file.Files
import java.nio.file.Path
file('./from/hogefuga.txt').createNewFile()
Files.writeString(Path.of('./from/hogefuga.txt'), '''
Hello, ${hoge} !
Hello, ${fuga} !
''');

// hogefuga.txtをテンプレートにして、${hoge}と${fuga}の中身を置き換えてファイル生成
copy {
    from './from/hogefuga.txt'
    into './into'
    expand([
        hoge: 'aaa',
        fuga: 'bbb'
    ])
}

delete './from'
delete './into'


// execでコマンド実行ができる
exec {
    commandLine 'java', '-version'
}

// 環境変数の指定
// - mac / linux
exec {
    environment = [ 'test1': 'aaa' , 'test2': 'bbb' , 'test3': 'ccc' ]
    commandLine 'sh', '-c', 'echo $test1 $test2 $test3'
}

// javaexecでjavaコマンドを呼び出し
import java.nio.file.Path;
import java.nio.file.Files;

delete('./Main.java')
delete('./Main.class')

Files.writeString(Path.of('Main.java'), '''
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        System.out.println(Arrays.toString(args));
    }
}
''');

exec {
    commandLine 'javac', 'Main.java'
}


javaexec {
    main = 'Main'
    classpath = files('.')
    args = ['a', 'b', 'c']
}

delete('./Main.java')
delete('./Main.class')


/////////////////////////
// Gradle フレームワーク
/////////////////////////

// Taskの登録
tasks.register('task1') {
    doLast {
        println 'This is task1'
    }
    doLast {
        println 'Hello'
    }
    doLast {
        println 'World'
    }
}

